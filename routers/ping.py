from fastapi import APIRouter
from pydantic import BaseModel
from services.transcribe_service import processFile
import time
import boto3
import os
from tempfile import NamedTemporaryFile
from dotenv import load_dotenv
import torch
load_dotenv()


if torch.cuda.is_available():
    print("‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU)")
else:
    print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU)")



router = APIRouter()


@router.get("/cpu", summary="Ping-Pong API", tags=["Health Check"])
def ping():
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'pong' –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
    """
    if torch.cuda.is_available():
        answer = "‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU)"
    else:
        answer = "‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU)"

    return {"message": answer}

@router.get("/ping", summary="Ping-Pong API", tags=["Health Check"])
def ping():
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'pong'.
    """
    return {"message": "pong"}

class AudioRequest(BaseModel):
    audio_url: str


@router.post("/audio", summary="–ü—Ä–∏–Ω—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ", tags=["Audio"])
def process_audio(request: AudioRequest):

    file_key = request.audio_url
    load_dotenv()
    torch_variable = str(torch.cuda.is_available())
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    bucket_name = "whisper-audiotest"

    s3 = boto3.client(
        's3',
        endpoint_url="http://storage.yandexcloud.net",
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY
    )

    file_obj = s3.get_object(Bucket=bucket_name, Key=file_key)
    temp_dir = os.path.join(os.getcwd(), 'temp')
    os.makedirs(temp_dir, exist_ok=True)
    temp_file_path = os.path.join(temp_dir, file_key)

    with open(temp_file_path, 'wb') as temp_file:
        temp_file.write(file_obj['Body'].read())

    print(f'üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_file_path}')

    # === –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è ===
    print("üß† –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")
    start_time = time.time()
    answer = processFile(temp_file_path)
    duration = round(time.time() - start_time, 2)  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {duration} —Å–µ–∫—É–Ω–¥.")

    # === –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ===
    text_filename = os.path.splitext(file_key)[0] + ".txt"
    text_file_path = os.path.join(temp_dir, text_filename)

    # === –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π .txt —Ñ–∞–π–ª ===
    with open(text_file_path, "w", encoding="utf-8") as f:
        f.write(answer)
        f.write(f"\n\n‚è±Ô∏è –§–∞–π–ª –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {duration} —Å–µ–∫—É–Ω–¥.")
        f.write(f"\n\n‚è±Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA: {torch_variable}.")

    print(f"üìù –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {text_file_path}")

    # === –ó–∞–≥—Ä—É–∂–∞–µ–º .txt –æ–±—Ä–∞—Ç–Ω–æ –≤ S3 ===
    s3.upload_file(
        Filename=text_file_path,
        Bucket=bucket_name,
        Key=text_filename
    )
    print(f"‚òÅÔ∏è –§–∞–π–ª {text_filename} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3 (–≤ –∫–æ—Ä–µ–Ω—å –±–∞–∫–µ—Ç–∞)")

    # === –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ===
    os.remove(text_file_path)
    os.remove(temp_file_path)
    print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")

    return {"message": f"–í–∞—à–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å: {answer}"}